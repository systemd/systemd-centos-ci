# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.define :archlinux_systemd
  config.vm.box = "generic/arch"
  # Don't replace the original Vagrant's insecure key
  config.ssh.insert_key = false

  # Note: CentOS CI infra specific overrides - you may want to change them
  #       to run the VM locally
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = ENV.fetch("VAGRANT_DRIVER", "kvm")
    libvirt.memory = ENV.fetch("VAGRANT_MEMORY", "8192")
    libvirt.cpus = ENV.fetch("VAGRANT_CPUS", "8")

    # Pass through /dev/random from the host to the VM
    libvirt.random :model => 'random'
  end

  config.vm.provision "shell", privileged: true, inline: <<-SHELL
    set -e

    whoami

    # Initialize pacman's keyring
    pacman-key --init
    pacman-key --populate archlinux
    pacman --noconfirm -S archlinux-keyring
    # Upgrade the system
    pacman --noconfirm -Syu
    # Install build dependencies
    # Package groups: base, base-devel
    pacman --needed --noconfirm -S base base-devel bpf btrfs-progs acl audit bash-completion clang compiler-rt docbook-xsl \
        ethtool gdm git gnu-efi-libs gperf intltool iptables kexec-tools kmod libcap libelf libfido2 libgcrypt libidn2 \
        libmicrohttpd libpwquality libseccomp libutil-linux libxkbcommon libxslt linux-api-headers llvm llvm-libs lvm2 lz4 \
        meson multipath-tools ninja p11-kit pam pcre2 python-jinja python-lxml qrencode quota-tools rust tpm2-pkcs11 xz
    # Install test dependencies
    # Note: openbsd-netcat in favor of gnu-netcat is used intentionally, as
    #       the GNU one doesn't support -U option required by test/TEST-12-ISSUE-3171
    pacman --needed --noconfirm -S coreutils busybox dhclient dhcp dhcpcd diffutils dnsmasq dosfstools e2fsprogs \
        gdb inetutils lcov libdwarf libelf net-tools openbsd-netcat open-iscsi python-pexpect qemu rsync screen socat \
        squashfs-tools strace vi wireguard-tools

    # Unlock root account and set its password to 'vagrant' to allow root login
    # via ssh
    echo -e 'vagrant\nvagrant' | passwd
    passwd -S root

    # Configure NTP (chronyd)
    pacman --needed --noconfirm -S chrony
    systemctl enable --now chronyd
    systemctl status chronyd

    # Enable GDM by default (to catch certain systemd-logind related issues)
    systemctl enable gdm.service

    # Compile & install libbpf-next
    pacman --needed --noconfirm -S elfutils libelf
    git clone https://github.com/libbpf/libbpf libbpf
    pushd libbpf/src
    LD_FLAGS="-Wl,--no-as-needed" NO_PKG_CONFIG=1 make
    make install
    ldconfig
    popd
    rm -fr libbpf

    # Compile & install tgt (iSCSI target utils)
    pacman --needed --noconfirm -S docbook-xsl libxslt perl-config-general
    git clone https://github.com/fujita/tgt tgt
    pushd tgt
    make sbindir=/usr/bin ISCSI=1
    make sbindir=/usr/bin install
    install -Dm644 scripts/tgtd.service /usr/lib/systemd/system/tgtd.service
    popd
    rm -fr tgt

    # Disable 'quiet' mode on the kernel command line and forward everything
    # to ttyS0 instead of just tty0, so we can collect it using QEMU's
    # -serial file:xxx feature. Also, explicitly enable unified cgroups, since
    # the default on Arch is the hybrid hierarchy, which interferes with some
    # tests
    sed -i '/GRUB_CMDLINE_LINUX_DEFAULT/ { s/quiet//; s/"$/ systemd.unified_cgroup_hierarchy=1 systemd.legacy_systemd_cgroup_controller=0 console=ttyS0"/ }' /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg

    # Tell systemd-networkd to ignore eth0 netdev, so we can keep it up
    # during the systemd-networkd testsuite
    cat << EOF > /etc/systemd/network/eth0.network
    [Match]
    Name=eth0

    [Link]
    Unmanaged=yes
EOF

  SHELL
end
