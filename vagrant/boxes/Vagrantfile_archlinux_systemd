# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.define :archlinux_systemd

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # Possible FIXME: archlinux/archlinux image is for some reason failing
  # in the CentOS CI infrastructure due to unwritable keyring
  # config.vm.box = "archlinux/archlinux"
  config.vm.box = "generic/arch"
  # Don't replace the original Vagrant's insecure key
  config.ssh.insert_key = false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Note: CentOS CI infra specific overrides - you may want to change them
  #       to run the VM locally
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = if ENV["VAGRANT_DRIVER"] then ENV["VAGRANT_DRIVER"] else "kvm" end
    libvirt.memory = if ENV["VAGRANT_MEMORY"] then ENV["VAGRANT_MEMORY"] else  "8192" end
    libvirt.cpus = if ENV["VAGRANT_CPUS"] then ENV["VAGRANT_CPUS"] else 8 end

    if ENV["VAGRANT_DISK_BUS"] then
      libvirt.disk_bus = ENV["VAGRANT_DISK_BUS"]
    end

    # Pass through /dev/random from the host to the VM
    libvirt.random :model => 'random'
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: true, inline: <<-SHELL
    set -e

    whoami

    # Initialize pacman's keyring
    pacman-key --init
    pacman-key --populate archlinux
    pacman --noconfirm -S archlinux-keyring
    # Upgrade the system
    pacman --noconfirm -Syu
    # Install build dependencies
    # Package groups: base, base-devel
    pacman --needed --noconfirm -S base base-devel acl audit bash-completion clang compiler-rt docbook-xsl ethtool \
        git gnu-efi-libs gperf intltool iptables kexec-tools kmod libcap libelf libgcrypt libidn2 \
        libmicrohttpd libpwquality libseccomp libutil-linux libxkbcommon libxslt linux-api-headers llvm llvm-libs lz4 meson ninja \
        p11-kit pam pcre2 python-lxml quota-tools xz
    # Install test dependencies
    # Note: openbsd-netcat in favor of gnu-netcat is used intentionally, as
    #       the GNU one doesn't support -U option required by test/TEST-12-ISSUE-3171
    pacman --needed --noconfirm -S coreutils busybox dhclient dhcpcd diffutils dnsmasq e2fsprogs \
        gdb inetutils net-tools openbsd-netcat qemu rsync socat strace vi wireguard-arch

    # Configure NTP (chronyd)
    pacman --needed --noconfirm -S chrony
    systemctl enable --now chronyd
    systemctl status chronyd

    # Compile & install libbpf-next
    pacman --needed --noconfirm -S elfutils libelf
    git clone https://github.com/libbpf/libbpf libbpf
    pushd libbpf/src
    LD_FLAGS="-Wl,--no-as-needed" NO_PKG_CONFIG=1 make
    make install
    popd
    rm -fr libbpf

    # Disable 'quiet' mode on the kernel command line and forward everything
    # to ttyS0 instead of just tty0, so we can collect it using QEMU's
    # -serial file:xxx feature
    sed -i '/GRUB_CMDLINE_LINUX_DEFAULT/ { s/quiet//; s/"$/ console=ttyS0"/ }' /etc/default/grub
    grub-mkconfig -o /boot/grub/grub.cfg

    # Tell systemd-networkd to ignore eth0 netdev, so we can keep it up
    # during the systemd-networkd testsuite
    cat << EOF > /etc/systemd/network/eth0.network
    [Match]
    Name=eth0

    [Link]
    Unmanaged=yes
EOF

  SHELL
end
